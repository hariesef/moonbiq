// Code generated by MockGen. DO NOT EDIT.
// Source: gcp_interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockGcpLayer is a mock of GcpLayer interface.
type MockGcpLayer struct {
	ctrl     *gomock.Controller
	recorder *MockGcpLayerMockRecorder
}

// MockGcpLayerMockRecorder is the mock recorder for MockGcpLayer.
type MockGcpLayerMockRecorder struct {
	mock *MockGcpLayer
}

// NewMockGcpLayer creates a new mock instance.
func NewMockGcpLayer(ctrl *gomock.Controller) *MockGcpLayer {
	mock := &MockGcpLayer{ctrl: ctrl}
	mock.recorder = &MockGcpLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGcpLayer) EXPECT() *MockGcpLayerMockRecorder {
	return m.recorder
}

// CheckTableExists mocks base method.
func (m *MockGcpLayer) CheckTableExists(tablePath, dataset string) (bool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckTableExists", tablePath, dataset)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckTableExists indicates an expected call of CheckTableExists.
func (mr *MockGcpLayerMockRecorder) CheckTableExists(tablePath, dataset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckTableExists", reflect.TypeOf((*MockGcpLayer)(nil).CheckTableExists), tablePath, dataset)
}

// Close mocks base method.
func (m *MockGcpLayer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockGcpLayerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGcpLayer)(nil).Close))
}

// CopyTable mocks base method.
func (m *MockGcpLayer) CopyTable(srcDataset, srcTable, dstDataset, dstTable string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyTable", srcDataset, srcTable, dstDataset, dstTable)
	ret0, _ := ret[0].(error)
	return ret0
}

// CopyTable indicates an expected call of CopyTable.
func (mr *MockGcpLayerMockRecorder) CopyTable(srcDataset, srcTable, dstDataset, dstTable interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyTable", reflect.TypeOf((*MockGcpLayer)(nil).CopyTable), srcDataset, srcTable, dstDataset, dstTable)
}

// CreateTable mocks base method.
func (m *MockGcpLayer) CreateTable(tablePath, dataset, tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTable", tablePath, dataset, tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTable indicates an expected call of CreateTable.
func (mr *MockGcpLayerMockRecorder) CreateTable(tablePath, dataset, tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockGcpLayer)(nil).CreateTable), tablePath, dataset, tableName)
}

// DeleteGcsFile mocks base method.
func (m *MockGcpLayer) DeleteGcsFile(objectName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGcsFile", objectName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGcsFile indicates an expected call of DeleteGcsFile.
func (mr *MockGcpLayerMockRecorder) DeleteGcsFile(objectName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGcsFile", reflect.TypeOf((*MockGcpLayer)(nil).DeleteGcsFile), objectName)
}

// DeleteTable mocks base method.
func (m *MockGcpLayer) DeleteTable(dataset, tableName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTable", dataset, tableName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTable indicates an expected call of DeleteTable.
func (mr *MockGcpLayerMockRecorder) DeleteTable(dataset, tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTable", reflect.TypeOf((*MockGcpLayer)(nil).DeleteTable), dataset, tableName)
}

// LoadToBigQuery mocks base method.
func (m *MockGcpLayer) LoadToBigQuery(gcsPath, dataset, tableName string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadToBigQuery", gcsPath, dataset, tableName)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadToBigQuery indicates an expected call of LoadToBigQuery.
func (mr *MockGcpLayerMockRecorder) LoadToBigQuery(gcsPath, dataset, tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadToBigQuery", reflect.TypeOf((*MockGcpLayer)(nil).LoadToBigQuery), gcsPath, dataset, tableName)
}

// Setup mocks base method.
func (m *MockGcpLayer) Setup(ctx context.Context, bucketId, projectId, dataset string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setup", ctx, bucketId, projectId, dataset)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setup indicates an expected call of Setup.
func (mr *MockGcpLayerMockRecorder) Setup(ctx, bucketId, projectId, dataset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setup", reflect.TypeOf((*MockGcpLayer)(nil).Setup), ctx, bucketId, projectId, dataset)
}

// UploadToGcs mocks base method.
func (m *MockGcpLayer) UploadToGcs(objectName, file string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadToGcs", objectName, file)
	ret0, _ := ret[0].(error)
	return ret0
}

// UploadToGcs indicates an expected call of UploadToGcs.
func (mr *MockGcpLayerMockRecorder) UploadToGcs(objectName, file interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadToGcs", reflect.TypeOf((*MockGcpLayer)(nil).UploadToGcs), objectName, file)
}
